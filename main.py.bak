import os
import time
import logging
from collections import deque
import openai
import pandas as pd
from pybit.unified_trading import WebSocket, HTTP
from telegram import Bot
from dotenv import load_dotenv
from strategy import apply_strategy
from trader import BybitTrader

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SYMBOLS_STR = os.getenv("SYMBOLS", "BTCUSDT,ETHUSDT")
SYMBOLS = [symbol.strip() for symbol in SYMBOLS_STR.split(',')]
TESTNET = os.getenv("TESTNET", "false").lower() == "true"
ENABLE_TRADING = os.getenv("ENABLE_TRADING", "false").lower() == "true"
LEVERAGE = int(os.getenv("LEVERAGE", "5"))
RISK_PER_TRADE_PERCENT = float(os.getenv("RISK_PER_TRADE_PERCENT", "1"))

# –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
EMA_WINDOW = 100
COOLDOWN_PERIOD = 300  # 5 –º–∏–Ω—É—Ç

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
class SymbolFilter(logging.Filter):
    def filter(self, record):
        if not hasattr(record, 'symbol'):
            record.symbol = 'SYSTEM'
        return True

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - [%(symbol)s] - %(message)s')
logger = logging.getLogger(__name__)
for handler in logging.root.handlers:
    handler.addFilter(SymbolFilter())

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ API ---
try:
    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")
    if ENABLE_TRADING and (not api_key or not api_secret):
        raise ValueError("BYBIT_API_KEY –∏ BYBIT_API_SECRET –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.")
    
    http_session = HTTP(testnet=TESTNET, api_key=api_key, api_secret=api_secret)
    trader = BybitTrader(http_session, RISK_PER_TRADE_PERCENT, LEVERAGE)

    telegram_token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("CHAT_ID")
    if not telegram_token or not chat_id:
        raise ValueError("TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    tg_bot = Bot(telegram_token)

except (ValueError, TypeError) as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", extra={'symbol': 'SYSTEM'})
    exit()

# --- –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ ---
class SymbolTracker:
    def __init__(self, symbol: str, cooldown_period: int):
        self.symbol = symbol
        self.cooldown_period = cooldown_period
        self.klines = deque(maxlen=EMA_WINDOW + 50)
        self.last_signal_time = 0
        self.log_adapter = logging.LoggerAdapter(logger, {'symbol': self.symbol})

    def add_price(self, price: float):
        kline_point = {'timestamp': int(time.time() * 1000), 'open': price, 'high': price, 'low': price, 'close': price, 'volume': 0}
        self.klines.append(kline_point)
        self.analyze()

    def analyze(self):
        if len(self.klines) < EMA_WINDOW:
            self.log_adapter.info(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(self.klines)}/{EMA_WINDOW}")
            return

        df = pd.DataFrame(list(self.klines))
        strategy_df = apply_strategy(df.copy(), ema_window=EMA_WINDOW)
        
        if strategy_df.empty: return

        last_row = strategy_df.iloc[-1]
        signal = last_row.get('signal', 0)
        
        self.log_adapter.info(f"–¶–µ–Ω–∞: {last_row['close']:,.2f} | EMA: {last_row['ema']:,.2f} | RSI: {last_row['rsi']:.1f} | –°–∏–≥–Ω–∞–ª: {int(signal)}")

        time_since_last_signal = time.time() - self.last_signal_time
        if signal != 0 and time_since_last_signal >= self.cooldown_period:
            self.log_adapter.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª {int(signal)}! –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            last_row['symbol'] = self.symbol
            
            if ENABLE_TRADING:
                trade_result = trader.execute_trade(last_row)
                if trade_result:
                    self.log_adapter.info(f"–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞: {trade_result}")
                    message = self.format_trade_confirmation_message(trade_result)
                    send_telegram_signal(message)
                else:
                    self.log_adapter.warning("–¢–æ—Ä–≥–æ–≤—ã–π –º–æ–¥—É–ª—å –Ω–µ –æ—Ç–∫—Ä—ã–ª —Å–¥–µ–ª–∫—É. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö –≤—ã—à–µ.")
            else:
                # –ï—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                gpt_message = self._generate_gpt_signal(last_row)
                if gpt_message:
                    send_telegram_signal(gpt_message)
            
            self.last_signal_time = time.time()

    def format_trade_confirmation_message(self, trade_result: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–µ –¥–ª—è Telegram."""
        side_text = "üü¢ –ü–û–ö–£–ü–ö–ê" if trade_result['side'] == 'Buy' else "üî¥ –ü–†–û–î–ê–ñ–ê"
        message = (
            f"**–†–ï–ê–õ–¨–ù–ê–Ø –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê**\n\n"
            f"**–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:** `{trade_result['symbol']}`\n"
            f"**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {side_text}\n"
            f"**–û–±—ä–µ–º:** `{trade_result['qty']}`\n"
            f"**–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ (—Ä—ã–Ω–æ—á–Ω–∞—è):** `~{trade_result['entry_price']:,.4f}`\n\n"
            f"**–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞:**\n"
            f"‚îÄ –°—Ç–æ–ø-–ª–æ—Å—Å: `{trade_result['stop_loss']:,.4f}`\n"
            f"‚îÄ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: `{trade_result['take_profit']:,.4f}`\n\n"
            f"ID –æ—Ä–¥–µ—Ä–∞: `{trade_result['order_id']}`"
        )
        return message

    def _generate_gpt_signal(self, data: pd.Series) -> str:
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è —Ä–µ–∂–∏–º–∞, –∫–æ–≥–¥–∞ —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
        # ... (–∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GPT —Å–∏–≥–Ω–∞–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        return "GPT-—Å–∏–≥–Ω–∞–ª (—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)"


# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
def send_telegram_signal(text: str):
    try:
        tg_bot.send_message(chat_id=chat_id, text=text, parse_mode='Markdown')
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.", extra={'symbol': 'TELEGRAM'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}", extra={'symbol': 'TELEGRAM'})

trackers = {symbol: SymbolTracker(symbol, cooldown_period=COOLDOWN_PERIOD) for symbol in SYMBOLS}

def handle_websocket_message(msg: dict):
    try:
        symbol = msg.get("topic", "").split('.')[-1]
        if symbol in trackers:
            price_str = msg.get("data", {}).get("lastPrice")
            if price_str:
                trackers[symbol].add_price(float(price_str))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ WebSocket: {e}", extra={'symbol': 'WEBSOCKET'})

def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è: {', '.join(SYMBOLS)}", extra={'symbol': 'SYSTEM'})
    if ENABLE_TRADING:
        logger.warning("!!! –†–ï–ñ–ò–ú –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù !!!", extra={'symbol': 'SYSTEM'})
        if TESTNET:
            logger.warning("–¢–æ—Ä–≥–æ–≤–ª—è –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏—Å—å –Ω–∞ –¢–ï–°–¢–û–í–û–ô –°–ï–¢–ò Bybit.", extra={'symbol': 'SYSTEM'})
        else:
            logger.warning("!!! –¢–û–†–ì–û–í–õ–Ø –ë–£–î–ï–¢ –í–ï–°–¢–ò–°–¨ –ù–ê –†–ï–ê–õ–¨–ù–´–ï –î–ï–ù–¨–ì–ò !!!", extra={'symbol': 'SYSTEM'})
    else:
        logger.info("–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–≥–Ω–∞–ª—ã.", extra={'symbol': 'SYSTEM'})

    ws = WebSocket(testnet=TESTNET, channel_type="linear")
    for symbol in SYMBOLS:
        ws.ticker_stream(symbol=symbol, callback=handle_websocket_message)
    
    logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –ø–æ—Ç–æ–∫–∏.", extra={'symbol': 'SYSTEM'})
    while True:
        try:
            time.sleep(60)
        except KeyboardInterrupt:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", extra={'symbol': 'SYSTEM'})
            break

if __name__ == "__main__":
    main()